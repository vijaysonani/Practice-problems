package com.interviewbit.twopointers;

import java.util.ArrayList;

/**
 * 
 * Remove Element
 * 
 * Given an array and a value, remove all the instances of that value in the
 * array. Also return the number of elements left in the array after the
 * operation. It does not matter what is left beyond the expected length.
 * 
 * Example: If array A is [4, 1, 1, 2, 1, 3]
 * and value elem is 1, then new length is 3, and A is now [4, 2, 3]
 * 
 * Try to do it in less than linear additional space complexity.
 *
 */

public class ArrayRemoveElement {
  public static void main(String args[]) {
    System.out.println("com.interviewbit.twopointers.ArrayRemoveElement");

    // ArrayList<Integer> a = new ArrayList<Integer>(4);
    // a.add(0, 1);
    // a.add(1, 4);
    // a.add(2, 1);
    // a.add(3, 2);
    // a.add(4, 1);
    // a.add(5, 3);
    // System.out.println(new com.interviewbit.twopointers.ArrayRemoveElement().removeElement(a, 1));

    // A : [ 2, 0, 1, 2, 0, 3, 2, 2, 2, 1, 0, 0, 0, 1, 0, 0, 2, 2, 2, 3, 2, 3, 1, 2, 1, 2, 2, 3, 2, 3, 0, 3, 0, 2, 1, 2, 0, 0, 3, 2, 3, 0, 3, 0, 2, 3, 2, 2, 3, 1, 3, 3, 0, 3, 3, 0, 3, 3, 2, 0, 0, 0, 0, 1, 3, 0, 3, 1, 3, 1, 0, 2, 3, 3, 3, 2, 3, 3, 2, 2, 3, 3, 3, 1, 3, 2, 1, 0, 0, 0, 1, 0, 3, 2, 1, 0, 2, 3, 0, 2, 1, 1, 3, 2, 0, 1, 1, 3, 3, 0, 1, 2, 1, 2, 2, 3, 1, 1, 3, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 1, 3, 1, 3, 1, 1, 0, 2, 2, 0, 2, 3, 0, 1, 2, 1, 1, 3, 0, 2, 3, 2, 3, 2, 0, 2, 2, 3, 2, 2, 0, 2, 1, 3, 0, 2, 0, 2, 1, 3, 1, 1, 0, 0, 3, 0, 1, 2, 2, 1, 2, 0, 1, 0, 0, 0, 1, 1, 0, 3, 2, 3, 0, 1, 3, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 2, 0, 0, 1, 2, 0, 3, 0, 3, 3, 3, 0, 3, 3, 1, 0, 1, 2, 1, 0, 0, 2, 3, 1, 1, 3, 2 ]
    // B : 2

    // int arr[] = new int[]{ 2, 0, 1, 2, 0, 3, 2, 2, 2, 1, 0, 0, 0, 1, 0, 0, 2, 2, 2, 3, 2, 3, 1, 2, 1, 2, 2, 3, 2, 3, 0, 3, 0, 2, 1, 2, 0, 0, 3, 2, 3, 0, 3, 0, 2, 3, 2, 2, 3, 1, 3, 3, 0, 3, 3, 0, 3, 3, 2, 0, 0, 0, 0, 1, 3, 0, 3, 1, 3, 1, 0, 2, 3, 3, 3, 2, 3, 3, 2, 2, 3, 3, 3, 1, 3, 2, 1, 0, 0, 0, 1, 0, 3, 2, 1, 0, 2, 3, 0, 2, 1, 1, 3, 2, 0, 1, 1, 3, 3, 0, 1, 2, 1, 2, 2, 3, 1, 1, 3, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 1, 3, 1, 3, 1, 1, 0, 2, 2, 0, 2, 3, 0, 1, 2, 1, 1, 3, 0, 2, 3, 2, 3, 2, 0, 2, 2, 3, 2, 2, 0, 2, 1, 3, 0, 2, 0, 2, 1, 3, 1, 1, 0, 0, 3, 0, 1, 2, 2, 1, 2, 0, 1, 0, 0, 0, 1, 1, 0, 3, 2, 3, 0, 1, 3, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 2, 0, 0, 1, 2, 0, 3, 0, 3, 3, 3, 0, 3, 3, 1, 0, 1, 2, 1, 0, 0, 2, 3, 1, 1, 3, 2 };
    // ArrayList<Integer> a = new ArrayList<Integer>();
    // for (int i : arr){
    //     a.add(i);
    // }
    // System.out.println(new com.interviewbit.twopointers.ArrayRemoveElement().removeElement(a, 2));
    // System.out.println(a.toString());

    // ArrayList<Integer> a = new ArrayList<Integer>();
    // a.add(0, 0);
    // new com.interviewbit.twopointers.ArrayRemoveElement().removeElement(a, 0);
    // System.out.println(a);

    // A : [ 3, 3, 0, 2, 1, 2, 1, 0, 0, 2, 0, 2, 1, 3, 0, 1, 2, 0, 0, 1, 3, 2, 0, 2, 0, 3, 2, 3, 3, 1, 3, 0, 3, 0, 0, 2, 1, 3, 0, 2, 0, 1, 2, 1, 3, 3, 1, 2, 3, 2, 3, 1, 2, 3, 3, 2, 1, 2, 1, 2, 1, 2, 2, 0, 1, 2, 3, 0, 2, 0, 0, 1, 3, 1, 1, 0, 1, 2, 2, 3, 3, 1, 2, 3, 1, 1, 0, 0, 1, 1, 2, 2, 2, 1, 2, 1, 0, 3, 2, 2, 1, 3, 3, 2, 1, 1, 1, 1, 0, 2, 1, 1, 0, 0, 0, 3, 2, 3, 0, 0, 0, 2, 3, 2, 3, 2, 0, 2, 0, 2, 3, 1, 1, 3, 1, 0, 1, 0, 2, 0, 1, 3, 1, 1, 1, 0, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 3, 2, 3, 2, 3, 0, 0, 0, 3, 2, 1, 1, 2, 3, 2, 2, 3, 3, 2, 3, 1, 1, 2, 0, 2, 2, 2, 0, 0, 0, 1, 0, 2, 0, 0, 2, 3, 2, 2, 3, 1, 0, 2, 2, 2, 3, 3, 1, 3, 3, 1, 1, 0, 0, 1, 2, 1, 1, 2, 3, 0, 2, 1, 1, 2, 3, 0, 3, 0, 0, 3, 1, 0, 3, 2, 0, 3, 0, 1, 1, 1, 2, 2, 1, 3, 2, 3, 1, 1, 1, 0, 2, 2, 3, 2, 0, 0, 0, 1, 2, 0, 3, 1, 2, 0, 0, 3, 0, 0, 0, 1, 1, 1, 0, 3, 2, 3, 1, 1, 3, 1, 0, 3, 3, 0, 1, 2, 3, 0, 1, 1, 2, 2, 0, 1, 1, 3, 3, 0, 1, 1, 3, 0, 3, 1, 0, 0, 2, 2, 0, 3, 1, 3, 0, 0, 2, 3, 3, 2, 0, 0, 2, 2, 3, 2, 2, 3, 1, 0, 1, 2, 3, 2, 1, 0, 3, 3, 0, 1, 1, 3, 1, 3, 2, 3, 0, 3, 3, 0, 2, 3, 1, 3, 1, 1, 1, 0, 1, 3, 0, 1, 0, 1, 1, 0, 0, 3, 1, 1, 3, 2, 2, 1, 1, 2, 0, 0, 1, 1, 1, 1, 3, 2, 2, 1, 0, 3, 0, 0, 2, 3, 1, 1, 1, 2, 0, 1, 0, 1, 2, 3, 3, 3, 1, 0, 3, 2, 0, 0, 1, 0, 0, 2, 0, 3, 3, 3, 1, 2, 1, 1, 3, 3, 0, 1, 2, 3, 2, 2, 1, 3, 2, 2, 1, 3, 2, 2, 2, 2, 2, 1, 2, 0, 2, 2, 2, 0, 0, 1, 2, 2, 2, 2, 0, 1, 2, 0, 3, 0, 2, 0, 3, 2, 2, 2, 1, 1, 0, 2, 0, 2, 3, 0, 3, 1, 2, 0, 0, 1, 2, 1, 0, 0, 0, 3, 3, 2, 0, 3, 1, 0, 2, 3, 1, 3, 0, 1, 0, 2, 0, 2, 0, 1, 2, 0, 2, 3, 2, 1, 3, 1, 3, 1, 0, 3, 0, 1, 0, 2, 0, 3, 1, 1, 0, 1, 1, 3, 2, 0, 1, 3, 0, 0, 1, 3, 2, 0, 1, 0, 3, 1, 1, 0, 1, 0, 3, 2, 2, 3, 2, 0, 2, 3, 1, 2, 0, 1, 1, 3, 0, 0, 2, 1, 0, 2, 3, 3, 1, 1, 0, 3, 3, 1, 2, 2, 3, 2, 0, 2, 1, 2, 3, 0, 0, 1, 3, 2, 0, 1, 0, 1, 2, 0, 0, 1, 0, 1, 2, 1, 3, 1, 3, 3, 1, 1, 2, 0, 0, 2, 0, 1, 1, 3, 2, 1, 3, 1, 0, 3, 2, 2, 3, 3, 0, 3, 2, 3, 0, 2, 0, 1, 3, 1, 0, 0, 2, 2, 0, 1, 3, 2, 2, 3, 2, 2, 2, 3, 3, 3, 0, 1, 2, 0, 1, 0, 0, 0, 2, 0, 0, 1, 1, 0, 2, 1, 0, 3, 0, 3, 1, 1, 1, 1, 0, 2, 2, 2, 1, 3, 1, 1, 1, 3, 1, 3, 3, 3, 0, 1, 2, 2, 2, 3, 1, 2, 1, 0, 1, 3, 3, 2, 0, 1, 2, 0, 3, 1, 0, 0, 3, 3, 1, 1, 0, 1, 1, 0, 0, 3, 0, 0, 3, 1, 1, 2, 0, 0, 1, 1, 3, 0, 3, 1, 0, 2, 3, 1, 3, 2, 3, 3, 1, 3, 0, 1, 0, 2, 0, 1, 2, 0, 0, 0, 0, 1, 3, 1, 1, 0, 2, 2, 1, 3, 3, 2, 1, 3, 2, 3, 2, 1, 0, 0, 3, 0, 2, 2, 1, 1, 1, 0, 0, 2, 1, 2, 2, 2, 3, 1, 0, 1, 0, 1, 3, 1, 2, 1, 3, 1, 2, 1, 1, 0, 0, 1, 0, 0, 1, 1, 3, 2, 0, 1, 1, 2, 2, 3, 0, 1, 1, 1, 0, 3, 0, 1, 0, 1, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 3, 2, 2, 2, 0, 1, 3, 0, 3, 2, 3, 0, 1 ]
    // B : 0
    // int arr[] = new int[]{ 3, 3, 0, 2, 1, 2, 1, 0, 0, 2, 0, 2, 1, 3, 0, 1, 2, 0, 0, 1, 3, 2, 0, 2, 0, 3, 2, 3, 3, 1, 3, 0, 3, 0, 0, 2, 1, 3, 0, 2, 0, 1, 2, 1, 3, 3, 1, 2, 3, 2, 3, 1, 2, 3, 3, 2, 1, 2, 1, 2, 1, 2, 2, 0, 1, 2, 3, 0, 2, 0, 0, 1, 3, 1, 1, 0, 1, 2, 2, 3, 3, 1, 2, 3, 1, 1, 0, 0, 1, 1, 2, 2, 2, 1, 2, 1, 0, 3, 2, 2, 1, 3, 3, 2, 1, 1, 1, 1, 0, 2, 1, 1, 0, 0, 0, 3, 2, 3, 0, 0, 0, 2, 3, 2, 3, 2, 0, 2, 0, 2, 3, 1, 1, 3, 1, 0, 1, 0, 2, 0, 1, 3, 1, 1, 1, 0, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 3, 2, 3, 2, 3, 0, 0, 0, 3, 2, 1, 1, 2, 3, 2, 2, 3, 3, 2, 3, 1, 1, 2, 0, 2, 2, 2, 0, 0, 0, 1, 0, 2, 0, 0, 2, 3, 2, 2, 3, 1, 0, 2, 2, 2, 3, 3, 1, 3, 3, 1, 1, 0, 0, 1, 2, 1, 1, 2, 3, 0, 2, 1, 1, 2, 3, 0, 3, 0, 0, 3, 1, 0, 3, 2, 0, 3, 0, 1, 1, 1, 2, 2, 1, 3, 2, 3, 1, 1, 1, 0, 2, 2, 3, 2, 0, 0, 0, 1, 2, 0, 3, 1, 2, 0, 0, 3, 0, 0, 0, 1, 1, 1, 0, 3, 2, 3, 1, 1, 3, 1, 0, 3, 3, 0, 1, 2, 3, 0, 1, 1, 2, 2, 0, 1, 1, 3, 3, 0, 1, 1, 3, 0, 3, 1, 0, 0, 2, 2, 0, 3, 1, 3, 0, 0, 2, 3, 3, 2, 0, 0, 2, 2, 3, 2, 2, 3, 1, 0, 1, 2, 3, 2, 1, 0, 3, 3, 0, 1, 1, 3, 1, 3, 2, 3, 0, 3, 3, 0, 2, 3, 1, 3, 1, 1, 1, 0, 1, 3, 0, 1, 0, 1, 1, 0, 0, 3, 1, 1, 3, 2, 2, 1, 1, 2, 0, 0, 1, 1, 1, 1, 3, 2, 2, 1, 0, 3, 0, 0, 2, 3, 1, 1, 1, 2, 0, 1, 0, 1, 2, 3, 3, 3, 1, 0, 3, 2, 0, 0, 1, 0, 0, 2, 0, 3, 3, 3, 1, 2, 1, 1, 3, 3, 0, 1, 2, 3, 2, 2, 1, 3, 2, 2, 1, 3, 2, 2, 2, 2, 2, 1, 2, 0, 2, 2, 2, 0, 0, 1, 2, 2, 2, 2, 0, 1, 2, 0, 3, 0, 2, 0, 3, 2, 2, 2, 1, 1, 0, 2, 0, 2, 3, 0, 3, 1, 2, 0, 0, 1, 2, 1, 0, 0, 0, 3, 3, 2, 0, 3, 1, 0, 2, 3, 1, 3, 0, 1, 0, 2, 0, 2, 0, 1, 2, 0, 2, 3, 2, 1, 3, 1, 3, 1, 0, 3, 0, 1, 0, 2, 0, 3, 1, 1, 0, 1, 1, 3, 2, 0, 1, 3, 0, 0, 1, 3, 2, 0, 1, 0, 3, 1, 1, 0, 1, 0, 3, 2, 2, 3, 2, 0, 2, 3, 1, 2, 0, 1, 1, 3, 0, 0, 2, 1, 0, 2, 3, 3, 1, 1, 0, 3, 3, 1, 2, 2, 3, 2, 0, 2, 1, 2, 3, 0, 0, 1, 3, 2, 0, 1, 0, 1, 2, 0, 0, 1, 0, 1, 2, 1, 3, 1, 3, 3, 1, 1, 2, 0, 0, 2, 0, 1, 1, 3, 2, 1, 3, 1, 0, 3, 2, 2, 3, 3, 0, 3, 2, 3, 0, 2, 0, 1, 3, 1, 0, 0, 2, 2, 0, 1, 3, 2, 2, 3, 2, 2, 2, 3, 3, 3, 0, 1, 2, 0, 1, 0, 0, 0, 2, 0, 0, 1, 1, 0, 2, 1, 0, 3, 0, 3, 1, 1, 1, 1, 0, 2, 2, 2, 1, 3, 1, 1, 1, 3, 1, 3, 3, 3, 0, 1, 2, 2, 2, 3, 1, 2, 1, 0, 1, 3, 3, 2, 0, 1, 2, 0, 3, 1, 0, 0, 3, 3, 1, 1, 0, 1, 1, 0, 0, 3, 0, 0, 3, 1, 1, 2, 0, 0, 1, 1, 3, 0, 3, 1, 0, 2, 3, 1, 3, 2, 3, 3, 1, 3, 0, 1, 0, 2, 0, 1, 2, 0, 0, 0, 0, 1, 3, 1, 1, 0, 2, 2, 1, 3, 3, 2, 1, 3, 2, 3, 2, 1, 0, 0, 3, 0, 2, 2, 1, 1, 1, 0, 0, 2, 1, 2, 2, 2, 3, 1, 0, 1, 0, 1, 3, 1, 2, 1, 3, 1, 2, 1, 1, 0, 0, 1, 0, 0, 1, 1, 3, 2, 0, 1, 1, 2, 2, 3, 0, 1, 1, 1, 0, 3, 0, 1, 0, 1, 2, 2, 2, 2, 1, 1, 2, 3, 2, 0, 3, 2, 2, 2, 0, 1, 3, 0, 3, 2, 3, 0, 1 };
    // ArrayList<Integer> a = new ArrayList<Integer>();
    // for (int i : arr) {
    //   a.add(i);
    // }
    // System.out.println(new com.interviewbit.twopointers.ArrayRemoveElement().removeElement(a, 0));
    // System.out.println(a.toString());

    // A : [ 2, 0, 1, 2, 0, 3, 2, 2, 2, 1, 0, 0, 0, 1, 0, 0, 2, 2, 2, 3, 2, 3, 1, 2, 1, 2, 2, 3, 2, 3, 0, 3, 0, 2, 1, 2, 0, 0, 3, 2, 3, 0, 3, 0, 2, 3, 2, 2, 3, 1, 3, 3, 0, 3, 3, 0, 3, 3, 2, 0, 0, 0, 0, 1, 3, 0, 3, 1, 3, 1, 0, 2, 3, 3, 3, 2, 3, 3, 2, 2, 3, 3, 3, 1, 3, 2, 1, 0, 0, 0, 1, 0, 3, 2, 1, 0, 2, 3, 0, 2, 1, 1, 3, 2, 0, 1, 1, 3, 3, 0, 1, 2, 1, 2, 2, 3, 1, 1, 3, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 1, 3, 1, 3, 1, 1, 0, 2, 2, 0, 2, 3, 0, 1, 2, 1, 1, 3, 0, 2, 3, 2, 3, 2, 0, 2, 2, 3, 2, 2, 0, 2, 1, 3, 0, 2, 0, 2, 1, 3, 1, 1, 0, 0, 3, 0, 1, 2, 2, 1, 2, 0, 1, 0, 0, 0, 1, 1, 0, 3, 2, 3, 0, 1, 3, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 2, 0, 0, 1, 2, 0, 3, 0, 3, 3, 3, 0, 3, 3, 1, 0, 1, 2, 1, 0, 0, 2, 3, 1, 1, 3, 2 ]
    // B : 2
    int arr[] = new int[]{ 2, 0, 1, 2, 0, 3, 2, 2, 2, 1, 0, 0, 0, 1, 0, 0, 2, 2, 2, 3, 2, 3, 1, 2, 1, 2, 2, 3, 2, 3, 0, 3, 0, 2, 1, 2, 0, 0, 3, 2, 3, 0, 3, 0, 2, 3, 2, 2, 3, 1, 3, 3, 0, 3, 3, 0, 3, 3, 2, 0, 0, 0, 0, 1, 3, 0, 3, 1, 3, 1, 0, 2, 3, 3, 3, 2, 3, 3, 2, 2, 3, 3, 3, 1, 3, 2, 1, 0, 0, 0, 1, 0, 3, 2, 1, 0, 2, 3, 0, 2, 1, 1, 3, 2, 0, 1, 1, 3, 3, 0, 1, 2, 1, 2, 2, 3, 1, 1, 3, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 1, 3, 1, 3, 1, 1, 0, 2, 2, 0, 2, 3, 0, 1, 2, 1, 1, 3, 0, 2, 3, 2, 3, 2, 0, 2, 2, 3, 2, 2, 0, 2, 1, 3, 0, 2, 0, 2, 1, 3, 1, 1, 0, 0, 3, 0, 1, 2, 2, 1, 2, 0, 1, 0, 0, 0, 1, 1, 0, 3, 2, 3, 0, 1, 3, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 2, 0, 0, 1, 2, 0, 3, 0, 3, 3, 3, 0, 3, 3, 1, 0, 1, 2, 1, 0, 0, 2, 3, 1, 1, 3, 2 };
    ArrayList<Integer> a = new ArrayList<Integer>();
    for (int i : arr) {
      a.add(i);
    }
    System.out.println(new ArrayRemoveElement().removeElement(a, 2));
    System.out.println(a.toString());
  }

  public int removeElement(ArrayList<Integer> a, int b) {
    int target = b;
    int firstPointer = 0;
    int secondPointer = 0;

    while (secondPointer < a.size()) {
      if (a.get(firstPointer) == target) {
        for (int i = firstPointer + 1; i < a.size(); i++) {
          if (a.get(i) != target) {
            a.set(firstPointer, a.get(i));
            a.set(i, target);
            secondPointer = i + 1;
            firstPointer++;
            break;
          }
        }
      } else {
        firstPointer++;
        secondPointer++;
      }
    }
    // System.out.println(firstPointer);
    // System.out.println(a.get(firstPointer));

    // for (int i = firstPointer; i < a.size(); i++){
    //   a.set(i, null);
    // }

    // if (a.get(0) == target){
    //   a = new ArrayList<Integer>();
    //   System.out.println(a);    
    // }
    return firstPointer;
  }
}
